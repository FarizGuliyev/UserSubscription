// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cic_subscriptions_backend.Context;

#nullable disable

namespace cic_subscription_backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220930122314_MyMigrations12")]
    partial class MyMigrations12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Building.Apartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StreetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StreetId");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Building.Entrance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StreetId")
                        .HasColumnType("bigint");

                    b.Property<long>("fkApartmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("fkApartmentId");

                    b.ToTable("Entrance");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Building.Floor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("EntranceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntranceId");

                    b.ToTable("Floor");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Street", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("VillageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VillageId");

                    b.ToTable("Street");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Village", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Village");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("cic_subscriptions_backend.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Amount")
                        .HasPrecision(4, 2)
                        .HasColumnType("real");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("Date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("cic_subscriptions_backend.Models.PhoneNumber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("cic_subscriptions_backend.Models.SubscriptionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasPrecision(4, 2)
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionType");
                });

            modelBuilder.Entity("cic_subscriptions_backend.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Debt")
                        .HasPrecision(4, 2)
                        .HasColumnType("real");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubscriptionDate")
                        .HasColumnType("Date");

                    b.Property<long>("SubscriptionTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Building.Flat", b =>
                {
                    b.HasBaseType("cic_subscriptions_backend.Models.User");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Flat_Address");

                    b.Property<long>("FloorId")
                        .HasColumnType("bigint");

                    b.HasIndex("FloorId");

                    b.HasDiscriminator().HasValue("Flat");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.House.HouseAddress", b =>
                {
                    b.HasBaseType("cic_subscriptions_backend.Models.User");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StreetId")
                        .HasColumnType("bigint");

                    b.HasIndex("StreetId");

                    b.HasDiscriminator().HasValue("HouseAddress");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Building.Apartment", b =>
                {
                    b.HasOne("cic_subscription_backend.Models.LocationModels.Street", "fkStreet")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkStreet");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Building.Entrance", b =>
                {
                    b.HasOne("cic_subscription_backend.Models.LocationModels.Building.Apartment", "fkApartment")
                        .WithMany()
                        .HasForeignKey("fkApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkApartment");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Building.Floor", b =>
                {
                    b.HasOne("cic_subscription_backend.Models.LocationModels.Building.Entrance", "fkEntrance")
                        .WithMany()
                        .HasForeignKey("EntranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkEntrance");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.District", b =>
                {
                    b.HasOne("cic_subscription_backend.Models.Region", "fkRegion")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkRegion");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Street", b =>
                {
                    b.HasOne("cic_subscription_backend.Models.LocationModels.Village", "fkVillage")
                        .WithMany()
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkVillage");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Village", b =>
                {
                    b.HasOne("cic_subscription_backend.Models.LocationModels.District", "fkDistrict")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkDistrict");
                });

            modelBuilder.Entity("cic_subscriptions_backend.Models.Payment", b =>
                {
                    b.HasOne("cic_subscriptions_backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("cic_subscriptions_backend.Models.PhoneNumber", b =>
                {
                    b.HasOne("cic_subscriptions_backend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("cic_subscriptions_backend.Models.User", b =>
                {
                    b.HasOne("cic_subscriptions_backend.Models.SubscriptionType", "fkSubs")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkSubs");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.Building.Flat", b =>
                {
                    b.HasOne("cic_subscription_backend.Models.LocationModels.Building.Floor", "fkFloor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkFloor");
                });

            modelBuilder.Entity("cic_subscription_backend.Models.LocationModels.House.HouseAddress", b =>
                {
                    b.HasOne("cic_subscription_backend.Models.LocationModels.Street", "fkStreet")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fkStreet");
                });
#pragma warning restore 612, 618
        }
    }
}
